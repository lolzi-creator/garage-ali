{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///Users/up278820/aligarage/auto-garage-website/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\nimport { Car } from '@/types';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Database types for TypeScript\nexport interface Database {\n  public: {\n    Tables: {\n      cars: {\n        Row: Car;\n        Insert: Omit<Car, 'id'> & { id?: string };\n        Update: Partial<Car>;\n      };\n    };\n  };\n}\n\n// Typed Supabase client\nexport const supabaseTyped = createClient<Database>(supabaseUrl, supabaseAnonKey); "],"names":[],"mappings":";;;;AAAA;;AAGA,MAAM;AACN,MAAM;AAEC,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAgB3C,MAAM,gBAAgB,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAY,aAAa","debugId":null}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file:///Users/up278820/aligarage/auto-garage-website/src/lib/cars.ts"],"sourcesContent":["import { supabase } from './supabase';\nimport { Car, CarFilter } from '@/types';\n\n// Transform database row (snake_case) to Car object (camelCase)\nfunction transformDBRowToCar(dbRow: any): Car {\n  return {\n    id: dbRow.id,\n    brand: dbRow.brand,\n    model: dbRow.model,\n    year: dbRow.year,\n    price: dbRow.price,\n    mileage: dbRow.mileage,\n    fuelType: dbRow.fuel_type,\n    transmission: dbRow.transmission,\n    bodyType: dbRow.body_type,\n    color: dbRow.color,\n    doors: dbRow.doors,\n    seats: dbRow.seats,\n    power: dbRow.power,\n    engine: dbRow.engine,\n    features: dbRow.features || [],\n    description: dbRow.description,\n    images: dbRow.images || [],\n    condition: dbRow.condition,\n    firstRegistration: dbRow.first_registration,\n    previousOwners: dbRow.previous_owners,\n    inspection: dbRow.inspection,\n    location: dbRow.location,\n    contactPerson: dbRow.contact_person,\n    isAvailable: dbRow.is_available,\n    isFeatured: dbRow.is_featured,\n    dateAdded: dbRow.date_added,\n  };\n}\n\n// Transform Car object (camelCase) to database format (snake_case)\nfunction transformCarToDBRow(car: Car) {\n  return {\n    id: car.id,\n    brand: car.brand,\n    model: car.model,\n    year: car.year,\n    price: car.price,\n    mileage: car.mileage,\n    fuel_type: car.fuelType,\n    transmission: car.transmission,\n    body_type: car.bodyType,\n    color: car.color,\n    doors: car.doors,\n    seats: car.seats,\n    power: car.power,\n    engine: car.engine,\n    features: car.features,\n    description: car.description,\n    images: car.images,\n    condition: car.condition,\n    first_registration: car.firstRegistration,\n    previous_owners: car.previousOwners,\n    inspection: car.inspection,\n    location: car.location,\n    contact_person: car.contactPerson,\n    is_available: car.isAvailable,\n    is_featured: car.isFeatured,\n    date_added: car.dateAdded,\n  };\n}\n\nexport class CarService {\n  // Get all cars\n  static async getAllCars(): Promise<Car[]> {\n    const { data, error } = await supabase\n      .from('cars')\n      .select('*')\n      .eq('is_available', true)\n      .order('date_added', { ascending: false });\n\n    if (error) {\n      console.error('Error fetching cars:', error);\n      throw new Error('Failed to fetch cars');\n    }\n\n    return data.map(transformDBRowToCar);\n  }\n\n  // Get car by ID\n  static async getCarById(id: string): Promise<Car | null> {\n    const { data, error } = await supabase\n      .from('cars')\n      .select('*')\n      .eq('id', id)\n      .eq('is_available', true)\n      .single();\n\n    if (error) {\n      if (error.code === 'PGRST116') {\n        return null; // Car not found\n      }\n      console.error('Error fetching car:', error);\n      throw new Error('Failed to fetch car');\n    }\n\n    return transformDBRowToCar(data);\n  }\n\n  // Get featured cars\n  static async getFeaturedCars(): Promise<Car[]> {\n    const { data, error } = await supabase\n      .from('cars')\n      .select('*')\n      .eq('is_available', true)\n      .eq('is_featured', true)\n      .order('date_added', { ascending: false });\n\n    if (error) {\n      console.error('Error fetching featured cars:', error);\n      throw new Error('Failed to fetch featured cars');\n    }\n\n    return data.map(transformDBRowToCar);\n  }\n\n  // Search and filter cars\n  static async searchCars(filters: CarFilter): Promise<Car[]> {\n    let query = supabase\n      .from('cars')\n      .select('*')\n      .eq('is_available', true);\n\n    // Apply filters\n    if (filters.brand) {\n      query = query.eq('brand', filters.brand);\n    }\n    if (filters.priceMin !== undefined) {\n      query = query.gte('price', filters.priceMin);\n    }\n    if (filters.priceMax !== undefined) {\n      query = query.lte('price', filters.priceMax);\n    }\n    if (filters.yearMin !== undefined) {\n      query = query.gte('year', filters.yearMin);\n    }\n    if (filters.yearMax !== undefined) {\n      query = query.lte('year', filters.yearMax);\n    }\n    if (filters.mileageMax !== undefined) {\n      query = query.lte('mileage', filters.mileageMax);\n    }\n    if (filters.powerMin !== undefined) {\n      query = query.gte('power', filters.powerMin);\n    }\n    if (filters.powerMax !== undefined) {\n      query = query.lte('power', filters.powerMax);\n    }\n    if (filters.fuelType) {\n      query = query.eq('fuel_type', filters.fuelType);\n    }\n    if (filters.transmission) {\n      query = query.eq('transmission', filters.transmission);\n    }\n    if (filters.bodyType) {\n      query = query.eq('body_type', filters.bodyType);\n    }\n\n    query = query.order('date_added', { ascending: false });\n\n    const { data, error } = await query;\n\n    if (error) {\n      console.error('Error searching cars:', error);\n      throw new Error('Failed to search cars');\n    }\n\n    return data.map(transformDBRowToCar);\n  }\n\n  // Admin: Get all cars (including unavailable)\n  static async getAllCarsAdmin(): Promise<Car[]> {\n    const { data, error } = await supabase\n      .from('cars')\n      .select('*')\n      .order('date_added', { ascending: false });\n\n    if (error) {\n      console.error('Error fetching cars for admin:', error);\n      throw new Error('Failed to fetch cars');\n    }\n\n    return data.map(transformDBRowToCar);\n  }\n\n  // Admin: Create new car\n  static async createCar(carData: Omit<Car, 'id'>): Promise<Car> {\n    // Generate ID if not provided\n    const id = `car-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    \n    const car: Car = {\n      ...carData,\n      id,\n      dateAdded: new Date().toISOString().split('T')[0],\n      isAvailable: carData.isAvailable ?? true,\n      isFeatured: carData.isFeatured ?? false,\n      contactPerson: carData.contactPerson || 'Ali',\n      location: carData.location || 'Lengnau',\n    };\n\n    const dbRow = transformCarToDBRow(car);\n\n    const { data, error } = await supabase\n      .from('cars')\n      .insert(dbRow)\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating car:', error);\n      throw new Error('Failed to create car');\n    }\n\n    return transformDBRowToCar(data);\n  }\n\n  // Admin: Update car\n  static async updateCar(id: string, carData: Partial<Car>): Promise<Car> {\n    const dbRow = transformCarToDBRow({ ...carData, id } as Car);\n    \n    // Remove undefined values\n    Object.keys(dbRow).forEach(key => {\n      if ((dbRow as any)[key] === undefined) {\n        delete (dbRow as any)[key];\n      }\n    });\n\n    const { data, error } = await supabase\n      .from('cars')\n      .update(dbRow)\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error updating car:', error);\n      throw new Error('Failed to update car');\n    }\n\n    return transformDBRowToCar(data);\n  }\n\n  // Admin: Delete car\n  static async deleteCar(id: string): Promise<void> {\n    const { error } = await supabase\n      .from('cars')\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      console.error('Error deleting car:', error);\n      throw new Error('Failed to delete car');\n    }\n  }\n\n  // Get unique brands\n  static async getCarBrands(): Promise<string[]> {\n    const { data, error } = await supabase\n      .from('cars')\n      .select('brand')\n      .eq('is_available', true);\n\n    if (error) {\n      console.error('Error fetching car brands:', error);\n      throw new Error('Failed to fetch car brands');\n    }\n\n    const brands = [...new Set(data.map(item => item.brand))].sort();\n    return brands;\n  }\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 391, "column": 0}, "map": {"version":3,"sources":["file:///Users/up278820/aligarage/auto-garage-website/src/app/api/cars/brands/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { CarService } from '@/lib/cars';\n\n// GET /api/cars/brands - Get available car brands\nexport async function GET() {\n  try {\n    const brands = await CarService.getCarBrands();\n    return NextResponse.json(brands);\n  } catch (error) {\n    console.error('Error fetching car brands:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch car brands' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,oHAAA,CAAA,aAAU,CAAC,YAAY;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6B,GACtC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}